name: Pre-Release

on:
  push:
    branches:
      - dev

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - id: check
        name: Check if .versionrc changed in this push
        run: |
          echo "Checking commits from ${{ github.event.before }} to ${{ github.sha }}"

          BASE_SHA=${{ github.event.before }}
          HEAD_SHA=${{ github.sha }}

          # Get current version
          CURRENT_VERSION=$(jq -r '.version' package.json)

          # Get version from base commit
          if git show $BASE_SHA:package.json >/dev/null 2>&1; then
            BASE_VERSION=$(git show $BASE_SHA:package.json | jq -r '.version')
          else
            BASE_VERSION="0.0.0"
          fi

          echo "Base version: $BASE_VERSION"
          echo "Current version: $CURRENT_VERSION"

          if  [ "$CURRENT_VERSION" != "$BASE_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ version in package.json was modified in this push"

          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "❌ version in package.json was not modified in this push"
          fi

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: |
          bun install --ignore-scripts
        shell: bash
      - name: Run tests
        run: |
          bun run test
        shell: bash

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v2
      - name: Install dependencies
        run: |
          bun install --ignore-scripts
        shell: bash
      - name: Build application
        run: |
          bun run build
        shell: bash
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.sha }}
          path: dist/

  release:
    runs-on: ubuntu-latest
    needs: [test, build, check-version]
    if: needs.check-version.outputs.should-release == 'true'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: ${{ github.sha }}
      - name: Install uv
        run: |
          sudo apt update
          sudo apt install -y curl
          sudo curl -LsSf https://astral.sh/uv/install.sh | sh
        shell: bash
      - name: Clone pipelines
        run: |
          cd ~
          git clone https://github.com/CharlyGin/pipelines.git
        shell: bash
      - name: Install dependencies
        run: |
          cd ~/pipelines
          uv sync
        shell: bash
      - name: Run Tag & Release
        run: |
          VERSION=$(jq -r '.version' package.json)
          uv run ~/pipelines/scripts/tag_and_release.py --pre-release --tag $VERSION --app $GITHUB_WORKSPACE --build-dir /dist
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        shell: bash
